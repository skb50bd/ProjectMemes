@page "/tags"

@inject HttpClient Http

@using XMemes.Models.InputModels
@using XMemes.Models.ViewModels

<h1>Tags</h1>

<EditForm Model="@input" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="id" @bind-Value="input.Id" class="form-control w-50 mb-1" hidden/>
    <InputText id="name" @bind-Value="input.Name" class="form-control w-50 mb-1" />

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@if (tags.Any())
{
    <table class="table table-striped table-hover m-1 mt-2">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var tag in tags)
            {
                <tr>
                    <td>@tag.Id</td>
                    <td>@tag.Name</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <span>"No Tags Here"</span>
}

@code {
    private TagInput input = new TagInput();
    private List<TagViewModel> tags = new List<TagViewModel>();

    private string baseAddress = "https://localhost:5051/tags";

    protected override async Task OnInitializedAsync()
    {
        await ReloadItems();
        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(input.Name))
        {
            input.Id = Guid.NewGuid().ToString();


            var response = await Http.PostAsJsonAsync(baseAddress, input);

            if (response.IsSuccessStatusCode)
            {
                tags.Add(new TagViewModel {Id = input.Id, Name = input.Name});
                input = new TagInput();
            }
        }
    }

    private async Task ReloadItems()
    {
        tags = await Http.GetFromJsonAsync<List<TagViewModel>>(baseAddress);
    }
}